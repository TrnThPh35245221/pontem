//! Autogenerated weights for sp_mvm
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2021-11-30, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:

// ./target/release/pontem

// benchmark

// --chain=dev

// --steps=50

// --repeat=20

// --pallet=sp-mvm

// --execution=wasm

// --wasm-execution=compiled

// --heap-pages=4096

// --output=./pallets/sp-mvm/src/weights.rs

// --template=./template.hbs

// --extrinsic=


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for sp_mvm.
pub trait WeightInfo {
	
	fn publish_empty_module(s: u32, ) -> Weight;
	
	fn publish_many_deps_module(s: u32, ) -> Weight;
	
	fn publish_s_module(s: u32, ) -> Weight;
	
	fn publish_m_module(s: u32, ) -> Weight;
	
	fn publish_l_module(s: u32, ) -> Weight;
	
	fn execute_many_params(s: u32, ) -> Weight;
	
	fn execute_store(s: u32, ) -> Weight;
	
	fn execute_load(s: u32, ) -> Weight;
	
	fn execute_store_event(s: u32, ) -> Weight;
	
	fn execute_vec_input(s: u32, ) -> Weight;
	
	fn execute_loop(s: u32, ) -> Weight;
	
}

/// Weights for sp_mvm using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {

	
	
	// Storage: Mvm VMStorage (r:2 w:1)
	
	fn publish_empty_module(s: u32, ) -> Weight {
		(61_564_000 as Weight)
			
			// Standard Error: 1_000
			.saturating_add((5_000 as Weight).saturating_mul(s as Weight))
			
			
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			
			
			
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			
			
	}
	
	
	// Storage: Mvm VMStorage (r:30 w:1)
	
	fn publish_many_deps_module(_s: u32, ) -> Weight {
		(589_241_000 as Weight)
			
			
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			
			
			
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			
			
	}
	
	
	// Storage: Mvm VMStorage (r:2 w:1)
	
	fn publish_s_module(_s: u32, ) -> Weight {
		(135_688_000 as Weight)
			
			
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			
			
			
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			
			
	}
	
	
	// Storage: Mvm VMStorage (r:2 w:1)
	
	fn publish_m_module(s: u32, ) -> Weight {
		(3_667_515_000 as Weight)
			
			// Standard Error: 444_000
			.saturating_add((1_632_000 as Weight).saturating_mul(s as Weight))
			
			
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			
			
			
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			
			
	}
	
	
	// Storage: Mvm VMStorage (r:2 w:1)
	
	fn publish_l_module(s: u32, ) -> Weight {
		(57_348_440_000 as Weight)
			
			// Standard Error: 4_911_000
			.saturating_add((2_006_000 as Weight).saturating_mul(s as Weight))
			
			
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			
			
			
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			
			
	}
	
	
	// Storage: Mvm VMStorage (r:1 w:0)
	
	// Storage: Timestamp Now (r:1 w:0)
	
	fn execute_many_params(_s: u32, ) -> Weight {
		(150_752_000 as Weight)
			
			
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			
			
			
			
	}
	
	
	// Storage: Mvm VMStorage (r:3 w:1)
	
	// Storage: Timestamp Now (r:1 w:0)
	
	fn execute_store(_s: u32, ) -> Weight {
		(103_546_000 as Weight)
			
			
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			
			
			
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			
			
	}
	
	
	// Storage: Mvm VMStorage (r:3 w:0)
	
	// Storage: Timestamp Now (r:1 w:0)
	
	fn execute_load(_s: u32, ) -> Weight {
		(65_722_000 as Weight)
			
			
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			
			
			
			
	}
	
	
	// Storage: Mvm VMStorage (r:7 w:1)
	
	// Storage: Timestamp Now (r:1 w:0)
	
	fn execute_store_event(_s: u32, ) -> Weight {
		(664_717_000 as Weight)
			
			
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			
			
			
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			
			
	}
	
	
	// Storage: Mvm VMStorage (r:1 w:0)
	
	// Storage: Timestamp Now (r:1 w:0)
	
	fn execute_vec_input(s: u32, ) -> Weight {
		(29_389_000 as Weight)
			
			// Standard Error: 2_000
			.saturating_add((10_000 as Weight).saturating_mul(s as Weight))
			
			
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			
			
			
			
	}
	
	
	// Storage: Mvm VMStorage (r:1 w:0)
	
	// Storage: Timestamp Now (r:1 w:0)
	
	fn execute_loop(_s: u32, ) -> Weight {
		(222_790_392_000 as Weight)
			
			
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			
			
			
			
	}
	
}

// For backwards compatibility and tests
impl WeightInfo for () {
	
	
	// Storage: Mvm VMStorage (r:2 w:1)
	
	fn publish_empty_module(s: u32, ) -> Weight {
		(61_564_000 as Weight)
			
			// Standard Error: 1_000
			.saturating_add((5_000 as Weight).saturating_mul(s as Weight))
			
			
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			
			
			
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			
			
	}
	
	
	// Storage: Mvm VMStorage (r:30 w:1)
	
	fn publish_many_deps_module(_s: u32, ) -> Weight {
		(589_241_000 as Weight)
			
			
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			
			
			
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			
			
	}
	
	
	// Storage: Mvm VMStorage (r:2 w:1)
	
	fn publish_s_module(_s: u32, ) -> Weight {
		(135_688_000 as Weight)
			
			
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			
			
			
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			
			
	}
	
	
	// Storage: Mvm VMStorage (r:2 w:1)
	
	fn publish_m_module(s: u32, ) -> Weight {
		(3_667_515_000 as Weight)
			
			// Standard Error: 444_000
			.saturating_add((1_632_000 as Weight).saturating_mul(s as Weight))
			
			
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			
			
			
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			
			
	}
	
	
	// Storage: Mvm VMStorage (r:2 w:1)
	
	fn publish_l_module(s: u32, ) -> Weight {
		(57_348_440_000 as Weight)
			
			// Standard Error: 4_911_000
			.saturating_add((2_006_000 as Weight).saturating_mul(s as Weight))
			
			
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			
			
			
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			
			
	}
	
	
	// Storage: Mvm VMStorage (r:1 w:0)
	
	// Storage: Timestamp Now (r:1 w:0)
	
	fn execute_many_params(_s: u32, ) -> Weight {
		(150_752_000 as Weight)
			
			
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			
			
			
			
	}
	
	
	// Storage: Mvm VMStorage (r:3 w:1)
	
	// Storage: Timestamp Now (r:1 w:0)
	
	fn execute_store(_s: u32, ) -> Weight {
		(103_546_000 as Weight)
			
			
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			
			
			
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			
			
	}
	
	
	// Storage: Mvm VMStorage (r:3 w:0)
	
	// Storage: Timestamp Now (r:1 w:0)
	
	fn execute_load(_s: u32, ) -> Weight {
		(65_722_000 as Weight)
			
			
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			
			
			
			
	}
	
	
	// Storage: Mvm VMStorage (r:7 w:1)
	
	// Storage: Timestamp Now (r:1 w:0)
	
	fn execute_store_event(_s: u32, ) -> Weight {
		(664_717_000 as Weight)
			
			
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			
			
			
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			
			
	}
	
	
	// Storage: Mvm VMStorage (r:1 w:0)
	
	// Storage: Timestamp Now (r:1 w:0)
	
	fn execute_vec_input(s: u32, ) -> Weight {
		(29_389_000 as Weight)
			
			// Standard Error: 2_000
			.saturating_add((10_000 as Weight).saturating_mul(s as Weight))
			
			
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			
			
			
			
	}
	
	
	// Storage: Mvm VMStorage (r:1 w:0)
	
	// Storage: Timestamp Now (r:1 w:0)
	
	fn execute_loop(_s: u32, ) -> Weight {
		(222_790_392_000 as Weight)
			
			
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			
			
			
			
	}
	
}
